@implements IDialogContentComponent<StepDialogParameters>
@using Microsoft.FluentUI.AspNetCore.Components
@using static AzureApplicationAccelerator.Client.Components.Steps.NewStepDialog
@inject IToastService ToastService
@inject UIDefinitionService DefinitionService
@inject IDialogService DialogService

<FluentDialogHeader ShowDismiss="true">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

<FluentDialogBody>
    <EditForm EditContext="@_editContext">
        <DataAnnotationsValidator />

        <FluentLabel Style="margin-bottom: 16px;">
            The step title must be unique and not empty.
        </FluentLabel>

        <FluentTextField @bind-Value="@Content.Name" Required Label="Name" />
        <FluentTextField @bind-Value="@Content.Label" Required Label="Label" />
        <FluentTextField @bind-Value="@Content.BladeTitle" Label="Blade title" />

        <div style="color: var(--error);">
            <FluentValidationSummary />
        </div>
    </EditForm>
</FluentDialogBody>

<FluentDialogFooter>
    <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.SpaceBetween" Style="width: 100%;">
        <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="0">
            @if (Content.IsEdit)
            {
                <FluentButton BackgroundColor="var(--error)"
                              Color="white"
                              OnClick="@ShowDeleteConfirmationAsync"
                              IconStart="@(new Icons.Filled.Size20.Delete().WithColor("white"))">
                    Delete
                </FluentButton>
            }
        </FluentStack>
        <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="8">
            <FluentButton Appearance="Appearance.Accent"
                          Disabled="@(!_editContext.Validate())"
                          OnClick="@SaveAsync">
                Save
            </FluentButton>
            <FluentButton Appearance="Appearance.Neutral"
                          OnClick="@CancelAsync">
                Cancel
            </FluentButton>
        </FluentStack>
    </FluentStack>
</FluentDialogFooter>

@code {
    private EditContext _editContext = default!;

    [Parameter]
    public StepDialogParameters Content { get; set; } = default!;

    [CascadingParameter]
    public FluentDialog? Dialog { get; set; }

    protected override void OnInitialized()
    {
        _editContext = new EditContext(Content);
    }

    private async Task SaveAsync()
    {
        if (_editContext.Validate())
        {
            if (await DefinitionService.GetStep(Content.Name) is not null &&
                !Content.IsEdit)
            {
                ToastService.ShowError("A step with this name already exists. Please choose a different name.");
                await Dialog.CancelAsync();
                return;
            }

            await Dialog.CloseAsync(Content);
        }
    }

    private async Task CancelAsync()
    {
        await Dialog.CancelAsync();
    }

    private async Task ShowDeleteConfirmationAsync()
    {
        var dialog = await DialogService.ShowConfirmationAsync(
            "Are you sure you want to delete this step?",
            "Yes",
            "No",
            "Delete Step");

        var result = await dialog.Result;
        if (result is not null)
        {
            Content.IsDeleted = true;
            await Dialog.CloseAsync(Content);
        }
    }

    public class StepDialogParameters
    {
        public string Name { get; set; } = string.Empty;
        public string Label { get; set; } = string.Empty;
        public string BladeTitle { get; set; } = string.Empty;
        public bool IsEdit { get; set; } = false;
        public bool IsDeleted { get; set; } = false;
    }
}