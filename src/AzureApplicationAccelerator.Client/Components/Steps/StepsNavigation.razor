@using System.ComponentModel.DataAnnotations
@using AzureApplicationAccelerator.Elements
@using static AzureApplicationAccelerator.Client.Components.Steps.NewStepDialog
@inject UIDefinitionService DefinitionService
@inject IDialogService DialogService
@inject IToastService ToastService

<FluentTabs @bind-ActiveTabId="@SelectedTabId"
            Size="TabSize.Large"
            OnTabChange="@((tab) => SelectStep(tab))">
    <FluentTab @key="@DefinitionService.Definition.Parameters.Basics.Name"
               Label="@AzureResourceUIConstants.CreateUiDefinition.Steps.BasicsName"
               Id="@($"step_{AzureResourceUIConstants.CreateUiDefinition.Steps.BasicsName}")"
               Data="@DefinitionService.Definition.Parameters.Basics" />

    @foreach (var step in DefinitionService.Definition.Parameters.Steps)
    {
        <FluentTab @bind-Label="@step.Name" Id="@($"step_{step.Name}")">
            <Header>
                <div style="display: flex;">
                    @step.Label
                    <FluentSpacer Width="10" />
                    <FluentIcon Value="@(new Icons.Filled.Size12.Edit())"
                                OnClick="@(() => OpenDialogAsync(step))" />
                </div>
            </Header>
        </FluentTab>

    }

    <div slot="start">
        <FluentButton OnClick="OpenDialogAsync"
                      IconStart="@(new Icons.Regular.Size24.AddCircle())"
                      Appearance="Appearance.Accent" />
    </div>
</FluentTabs>

@code {
    public string SelectedTabId = $"step_{AzureResourceUIConstants.CreateUiDefinition.Steps.BasicsName}";

    private async Task SelectStep(FluentTab tab)
    {
        var activeTab = tab;
        if (activeTab is null || activeTab.Label.Equals(DefinitionService.ActiveStep.Name, StringComparison.OrdinalIgnoreCase))
        {
            return;
        }

        if (await DefinitionService.GetStep(tab.Label) is not Step step)
        {
            ToastService.ShowError($"Step '{activeTab.Label}' not found.");
            return;
        }

        await DefinitionService.SetActiveStepAsync(step);
    }

    private async Task OpenDialogAsync()
    {
        var step = new Step() { Name = string.Empty, Label = string.Empty };
        await OpenDialogAsync(step);
    }

    private async Task OpenDialogAsync(Step step)
    {
        if (GetStepParameters(step) is not StepDialogParameters stepParameters ||
              GetDialogParameters(stepParameters) is not DialogParameters dialogParameters)
        {
            throw new InvalidOperationException("Failed to create parameters.");
        }

        var dialog = await DialogService.ShowDialogAsync<NewStepDialog>(stepParameters, dialogParameters);
        var result = await dialog.Result as DialogResult;
        try
        {
            await HandleDialogResultAsync(result, step.Name, stepParameters);
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"An error occurred while processing the dialog: {ex.Message}");
        }
    }

    private static DialogParameters GetDialogParameters(StepDialogParameters stepParameters)
    {
        return new DialogParameters()
        {
            Title = stepParameters.IsEdit ? $"Edit {stepParameters.Name}" : "Create a new step",
            PrimaryAction = stepParameters.IsEdit ? "Edit" : "Save",
            PrimaryActionEnabled = true,
            SecondaryAction = "Cancel",
            Width = "500px",
            PreventScroll = true
        };
    }

    private static StepDialogParameters GetStepParameters(Step step) =>
        new StepDialogParameters()
        {
            Name = step.Name,
            Label = step.Label ?? string.Empty,
            BladeTitle = step.BladeTitle ?? string.Empty,
            IsEdit = !string.IsNullOrEmpty(step.Name)
        };

    private async Task HandleDialogResultAsync(DialogResult result, string stepName, StepDialogParameters stepDialogParameters)
    {
        if (result?.Data is not StepDialogParameters dialogData)
        {
            ToastService.ShowError("Dialog returned no data.");
            return;
        }

        if (result.Cancelled) { return; }

        try
        {
            var tabName = dialogData.Name;
            if (stepDialogParameters.IsDeleted)
            {
                await DefinitionService.RemoveStepAsync(stepName);
                ToastService.ShowSuccess($"Step {stepName} has been deleted.");
                return;
            }
            if (stepDialogParameters.IsEdit)
            {
                await DefinitionService.EditStepAsync(stepName, MapToStep(dialogData));
            }
            else
            {
                await DefinitionService.AddStepAsync(MapToStep(dialogData));
            }
        }
        catch (Exception)
        {
            ToastService.ShowError($"Failed to {(stepDialogParameters.IsEdit ? "edit" : "create")} step '{dialogData.Name}'.");
        }
    }

    private static Step MapToStep(StepDialogParameters parameters)
    {
        ArgumentNullException.ThrowIfNull(parameters, nameof(parameters));
        return new Step
        {
            Name = parameters.Name,
            Label = parameters.Label,
            BladeTitle = parameters.BladeTitle
        };
    }
}
