@inject UIDefinitionService DefinitionService
@inject IDialogService DialogService
@inject IToastService ToastService

<div class="canvas-item">
    <div class="sortable-grab">
        <FluentIcon Value="@(new Icons.Regular.Size20.ArrowSort())" />
    </div>
    <div class="canvas-item-content">
        @if (_editorComponent is not null)
        {
            <DynamicComponent Type="_editorComponent" Parameters="new Dictionary<string, object> { { nameof(Element), Element } }" />
        }

    </div>
    <div class="canvas-item-actions">
        <FluentButton Appearance="Appearance.Accent" OnClick="OpenPanel">Edit</FluentButton>
        <FluentButton Color="var(--info)" OnClick="RemoveItem">Delete</FluentButton>
    </div>
</div>

@code {
    [Parameter] public UIElement Element { get; set; } = default!;

    private Type _editorComponent;

    protected override Task OnInitializedAsync()
    {
        ElementRegistry.ComponentMap.TryGetValue(Element.Type, out var editorComponent);
        if (editorComponent != null)
        {
            _editorComponent = editorComponent.EditorComponent;
        }

        return base.OnInitializedAsync();
    }

    private async Task OpenPanel()
    {
        if (Element == null) return;
        var dialog = await DialogService.ShowPanelAsync<EditPanel>(Element, new DialogParameters<UIElement>()
        {
            Content = Element,
            Alignment = HorizontalAlignment.Right,
            Title = $"{Element.Type}",
            PrimaryAction = "Yes",
            PrimaryActionEnabled = true,
            SecondaryAction = "Cancel",
            Width = "40vw",
            OnDialogResult = DialogService.CreateDialogCallback(this, HandleDialog)
        });
    }

    private async Task HandleDialog(DialogResult result)
    {
        if (result.Cancelled) return;
        if (result.Data is UIElement updatedElement)
        {
            try
            {
                await DefinitionService.UpdateElementAsync(updatedElement);
                ToastService.ShowSuccess("Element updated successfully");
            }
            catch (Exception ex)
            {
                ToastService.ShowError($"Failed to update element: {ex.Message}");
            }
        }
        else
        {
            ToastService.ShowError("Invalid data returned from dialog");
        }

    }

    private async Task RemoveItem()
    {
        try
        {
            if (Element == null) return;

            await DefinitionService.RemoveElementAsync(Element.Id);
            ToastService.ShowSuccess("Element removed");
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Failed to remove element: {ex.Message}");
        }
    }
}