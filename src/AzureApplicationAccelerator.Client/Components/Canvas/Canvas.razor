@inject UIDefinitionService DefinitionService
@inject IToastService ToastService

<div class="sortable-container">
    @if (!DefinitionService.ActiveStep?.Elements?.Any() ?? true)
    {
        <div class="dropzone-hint">Drag elements here to get started!</div>
    }

    <FluentSortableList Id="canvas"
                        Group="elementList"
                        Items="@DefinitionService.ActiveStep?.Elements"
                        OnUpdate="@SortList"
                        Clone="true"
                        Handle="true" 
                        Class="canvas-container">
        <ItemTemplate>
            <CanvasItem Element="@context" @key="@context.GetHashCode()" />
        </ItemTemplate>
    </FluentSortableList>
</div>

@code {
    protected override void OnInitialized()
    {
        DefinitionService.OnChange += StateHasChanged;
    }

    private async Task SortList(FluentSortableListEventArgs args)
    {
        if (args is null || args.OldIndex == args.NewIndex) return;

        var oldIndex = args.OldIndex;
        var newIndex = args.NewIndex;
        var oldElement = DefinitionService.ActiveStep.Elements[oldIndex];
        var newElement = DefinitionService.ActiveStep.Elements[newIndex];
        try
        {
            await DefinitionService.InsertAtAsync(oldElement, newIndex);
        }
        catch (InvalidOperationException ioEx)
        {
            ToastService.ShowError(ioEx.Message);
        }
    }
}
